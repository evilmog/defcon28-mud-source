This mud uses a language called LPC its an object oriented language
similar to C.

Everything in the mud is an object.  The main base objects are:
	"/std/object", "/std/monster", "/std/room"

objects you create will inherit one of these base classes or another
class based off of one of these, and then define a function "setup"
Then you'll set various properties and or add functions to the objects
to make them do all kinds of nifty things.

You probably want to start with rooms, get the hang of them then move to
monsters and then work on objects after that.

There are lots of great examples in /domains.  Start simple and work
your way up to more complex objects.  You can also look at your workroom for
a basic room.

You can read the following documents to learn the basics of these objects:
	room_code monster_code object_code

If you really want to know how it all works take a look at the code behind
these objects, they can all be found in /std

You can start creating files in your wiz directory once your area is approved
we'll move it to the domains directory and make it an official part of the mud.
Until then it is not open to players.

Under your wiz directory you should put rooms in ~/rooms
objects in ~/obj or ~/objects
and monsters in ~monsters/
Just look at /domains/required for how things should be setup.
If you don't use these sub-directory's the code may not work because of
the security system built into the mud.

When you are creating an area, its a good idea to do some thinking about
what type of an area you want to create.  Some things to keep in mind:
	What level(s) of players will be attracted to your area?
		It's a good idea to focus on a block of levels, 1-3, 4-6
	What will players be doing in your area?
		You should try to have at least one quest per area.
		The quest should be something interesting and you want
		to strike the right balance between difficulty and payoff.
		The quest should also be something that entertains the player.
	What is the theme of your area?
		You want to set your section apart from the rest of the mud,
		you also want players to know when they are in your area and
		when they are leaving it.

Some examples can be found in domains:
	boothill = "A western adventure"
	gurba = "A medieval adventure"
	newbie = "A place for new players to learn how to play the game"
Here are some additional ideas to get you started:
	Focus on a murder mystery maybe something with a Sherlock Homes
		environment.
	A war zone where you have to pick sides and help one side prevail over
		the other.

Debugging:
	Many times in programming you will need to create temporary output
	that you will use to debug what is going on.
	How you do this, depends on the type of thing you are trying to
	debug.  Here are a couple of examples:

	If your debugging a user command, you can most of the time use.
	write("The code got to this statement.\n");

	If your debugging an object you may want to use
	tell_room() instead,
	Or you may want to write a simple room command that
	then can use write and or tell_room.  If you use a room command, you
	can control who the message goes to as well as when the message is
	displayed.

	You may also want to use the logs.  To write to a log file use
	LOG_D->write_log(logname,message,level);
	example: LOG_D->write_log("test","This is a test message,1);

	What this will do is create a log named test and append our message
	to it, assuming that the log level is >= the current log level
	for that log.  In this case it will do that if the log level
	for "test" >= 1.  You can check the current log levels with the
	loglevel command.  The idea being If I have the following code:
	LOG_D->write_log("test","Message 1", 1);
	LOG_D->write_log("test","Message 2", 2);

	If the log level of test is 1, "Message 1" will be recorded while
	"Message 2" will not.  You can also adjust the log level with the
	loglevel command if you have sufficient privileges.
		
	You can also use the error command which will exit the current
	function and log a message to the error/runtime log as well as
	output to the main driver log.

Communicating:
	There are in general multiple groups that you need to communicate
	with when talking to a player and or the things they are interacting
	with.  You should make sure you are communicating with them all.
	Things to think about: current player, player they are interacting
	with, others that may see the interaction.

	The best way to look at this is by looking at an example.  Lets
	look at a simple command that talks to these various groups.  For
	our example we are going to look at the give command.

	Lets talk about the players first: this_player() is the object
	that represents the current player.  In general you want to
	also link to the target player to do that you' define an object
	and locate the target with some code, lets say we have stored the
        target players name in the string variable 'str';
        string str;
	object target;

        str = "sirdude";

	/* If we want to find player in the current room of this_player()
	   we would use something like this */
	target = this_environment()->present(str);
        /* The above line is a shorthand version of this */
	target = this_player()->query_environment()->present(str);

        /* If we just want to find the player regardless of if they are in
           the current room or not we would use something like this */
        target = USER_D->find_player(str);

        Once we have our two objects now it's time to communicate with them.
        for this_player() this is simple we just use write.  Something like
        this:
        write("You give the stick to " + target->query_Name() + "\n";

	Communicating with target looks like this:
        target->message(this_player()->query_Name() + " gives you a stick.\n");

	The other group we haven't talked about yet is the people in the room
        that might observer this interaction.  For that we use the tell_room
	function.  We are going to setup another object variable with the room.
	object room;

        room = this_player()->query_environment();

	Now to talk to the others in the room we use this:
        string message;

        message = this_player()->query_Name() + " gives a stick to " +
           target->query_Name() + "\n";
        room->tell_room(this_player(), message, target);

        There are a number of other functions we can use defined in
        std/modules/m_messages.c  to aid in communicating like this,
	our example 'give' uses the function: targeted_action to do this.

